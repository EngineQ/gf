// This is auto-generated by gf cli tool. You may not really want to edit it.

package defaults

import (
	"database/sql"
	"github.com/gogf/gf/database/gdb"
	"github.com/gogf/gf/frame/g"
)

import (
	"github.com/gogf/gf/os/gtime"
)

// User is the golang structure for table user.
type User struct {
	Id         int         `orm:"id,primary"      json:"id"`
	Passport   string      `orm:"passport"        json:"passport"`
	Password   string      `orm:"password"        json:"password"`
	Nickname   string      `orm:"nickname,unique" json:"nickname"`
	CreateTime *gtime.Time `orm:"create_time"     json:"create_time"`
}

var (
	// TableUser is the table name of user.
	TableUser = "user"
	// ModelUser is the model object of user.
	ModelUser = g.DB("default").Table(TableUser).Safe()
)

// Inserts does "INSERT...INTO..." statement for inserting current object into table.
func (r *User) Insert() (result sql.Result, err error) {
	return ModelUser.Data(r).Insert()
}

// Replace does "REPLACE...INTO..." statement for inserting current object into table.
// If there's already another same record in the table (it checks using primary key or unique index),
// it deletes it and insert this one.
func (r *User) Replace() (result sql.Result, err error) {
	return ModelUser.Data(r).Replace()
}

// Save does "INSERT...INTO..." statement for inserting/updating current object into table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *User) Save() (result sql.Result, err error) {
	return ModelUser.Data(r).Save()
}

// Update does "UPDATE...WHERE..." statement for updating current object from table.
// It updates the record if there's already another same record in the table
// (it checks using primary key or unique index).
func (r *User) Update() (result sql.Result, err error) {
	return ModelUser.Data(r).Where(gdb.GetWhereConditionOfStruct(r)).Update()
}

// Delete does "DELETE FROM...WHERE..." statement for deleting current object from table.
func (r *User) Delete() (result sql.Result, err error) {
	return ModelUser.Where(gdb.GetWhereConditionOfStruct(r)).Delete()
}
